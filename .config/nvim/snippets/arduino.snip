snippet init
  Serial.begin(9600);
snippet dwh
  digitalWrite(${1:13},${2:HIGH});${0}
snippet dwl
  digitalWrite(${1:13},${2:LOW});${0}
snippet pmi
  pinMode(${1:13},${2:INPUT});${0}
snippet imo
  pinMode(${1:13},${2:OUTPUT});${0}
snippet av
  Serial.available()${0}
snippet re
  Serial.read();${0}
snippet dalay
  delay(${1:100});${0}
snippet sp
  Serial.println(${1});${0}
snippet millis
  unsigned long m = millis();
snippet macros
  unsigned long m = macros();
##
## Control Statements
# if
snippet if
  if (${1:/* condition */}) {
  ${2}
 }
# else
snippet el
  else {
  ${1}
 }
# else if
snippet elif
  else if (${1:/* condition */}) {
  ${2}
 }
# ifi
snippet ifi
  if (${1:/* condition */}) ${2};
# ternary
snippet t
  ${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
  switch (${1:/* variable */}) {
  case ${2:/* variable case */}:
   ${3}
   ${4:break;}${5}
  default:
   ${6}
 }
# switch without default
snippet switchndef
  switch (${1:/* variable */}) {
  case ${2:/* variable case */}:
   ${3}
   ${4:break;}${5}
 }
# case
snippet case
  case ${1:/* variable case */}:
  ${2}
  ${3:break;}
##
## Loops
# for
snippet for
  for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
  ${4}
 }
# for (custom)
snippet forr
  for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
  ${5}
 }
# while
snippet wh
  while (${1:/* condition */}) {
  ${2}
 }
# do... while
snippet do
  do {
  ${2}
 } while (${1:/* condition */});
##
## Functions
# function definition
snippet fun
  ${1:void} ${2:function_name}(${3})
 {
  ${4}
 }
# function declaration
snippet fund
  ${1:void} ${2:function_name}(${3});
# struct
snippet st
  struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
  ${2:/* data */}
 }${3: /* optional variable list */};
# typedef struct
snippet tds
  typedef struct ${2:_$1 }{
  ${3:/* data */}
 } ${1:`vim_snippets#Filename('$1_t', 'name')`};
# typedef enum
snippet tde
  typedef enum {
  ${1:/* data */}
 } ${2:foo};
##
## Miscellaneous
# This is kind of convenient
snippet .
  [${1}]
